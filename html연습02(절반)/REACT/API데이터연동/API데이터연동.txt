fetch를 사용하여 외부 API에서 데이터를 가져오고, React 컴포넌트에서 이 데이터를 화면에 렌더링을 할 것이다.

목표
  1. 외부 API에서 사용자 목록을 가져와서 React 컴포넌트에서 화면을 표시합니다.
  2. useEffect를 사용해서 컴포넌트가 처음 렌더링될 때 한 번만 데이터를 가져옵니다.
  3. useState를 통해서 데이터를 관리하고 상태가 업데이트될 때마다 컴포넌트를 재렌더링합니다.

예시: App.js
  /*
    import React, { useState, useEffect } from 'react';

    function App() {
      const [users, setUsers] = useState([]); // 사용자 목록을 저장할 state
      const [loading, setLoading] = useState(true); // 로딩 상태를 저장할 state

      // API 호출 함수
      useEffect(() => {
        const fetchData = async () => {
          try {
            const response = await fetch('https://jsonplaceholder.typicode.com/users'); // 가상의 사용자 API
            const data = await response.json();
            setUsers(data); // API에서 받아온 데이터를 state에 저장
            setLoading(false); // 로딩 상태 업데이트
          } catch (error) {
            console.error('Error fetching data:', error);
            setLoading(false);
          }
        };

        fetchData();
      }, []); // 빈 배열을 두어 컴포넌트가 처음 렌더링될 때 한 번만 실행

      return (
        <div>
          <h1>Users List</h1>
          {loading ? ( // 로딩 중일 때 메시지 표시
            <p>Loading...</p>
          ) : (
            <ul>
              {users.map(user => ( // 데이터가 로드되면 사용자 목록 렌더링
                <li key={user.id}>{user.name} - {user.email}</li>
              ))}
            </ul>
          )}
        </div>
      );
    }

    export default App;
  */

코드설명
  상태(State)초기화:
    users는 API에서 가져온 사용자 데이터를 저장하는 상태이다.
    loading은 데이터를 불러오는 동안의 로딩 메세지를 표시하기 위한 상태이다.

  useEffect를 통한 API호출:
    useEffect를 사용하여 컴포넌트가 처음 렌더링될 때 API 요청이 한 번만 실행되도록 설정한다.
    fetchData함수가 API 호출을 담당하며, await fetch를 통해 데이터를 받아온다.
    데이터를 JSON형식으로 파싱한 후 setUsers를 통해서 users 상태에 저장하고, 로딩이 완료되면 setLoading(false)로 로딩 상태를 업데이트한다.
  
  로딩 중 및 데이터 렌더링:
    loading이 true인 동안에는 "loading..." 메세지를 표시하고, 데이터가 로드되면 목록을 렌더링한다.
    users.map을 사용하여 user 객체의 name과 email을 목록으로 표기한다.



작동 방식 요약
  컴포넌트가 마운트될 때 useEffect가 실행되어 fetchData 함수가 호출된다.
  API응답을 받아오면 setUsers를 통해서 데이터를 상태에 저장하고, loading 상태를 false로 변경한다.
  로딩이 완료되면 화면에 사용자 목록이 렌더링된다.

비동기 데이터 연동 시 고려 사항
  에러처리:
    API요청 중 에러가 발생할 수 있으므로, try-catch를 통해 에러를 처리한다.
  로딩상태관리:
    API요청 중에는 로딩 메시지를 표시하고, 요청이 완료되면 데이터를 렌더링한다.
  의존성 배열:
    useEffect의 두 번째 인자로 빈 배열 []을 전달하면 컴포넌트가 처음 렌더링될 때만 실행된다.

  L> 상단에서는 fetch를 사용하였지만, axios와 같은 라이브러리를 사용할 수도 있다. axios는 간결한 구문과 에러 처리가 더 용이하여 자주 사용된다.