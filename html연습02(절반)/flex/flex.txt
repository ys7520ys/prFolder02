----container속성으로 넣는 경우----

--flex--
    display: flex
      flexContainer의 값으로 display 값을 지정한다. => 자식의 값이 나열된다.

    float와 flex의 차이점
      float: 부모의 높이값을 따라가지 않는다. 각기 자식의 높이값을 가진다.
      L> 만약 자식의 값이 50px 100px 150px이렇게 구성되면 각기 높이가 달라진다.

      flex: 부모의 높이값을 따라간다. 
      L> 자식의 높이값이 모두 달라도 부모가 300px이면 모두 300px로 채워진다.


--inline-flex--
    일반적인 flex의 값은 가로로 100% 채워진다. 하지만 inline-flex는 inline처럼 요소 안에 들어간 내용만큼 길이가 늘어난다.

--flex-direction-- /* 나열할 배치의 방향을 설정한다 */
    row: 왼쪽에서 오른쪽으로 나열된다. 
      L> 설정하지 않아도 flex의 기본값과 동일하다.
    row-reverse: 오른쪽에서 왼쪽으로 나열된다.
    column: 위에서 아래로 쌓여간다.
    column-reverse: 아래에서 위로 쌓여간다.

--flex-wrap-- /* 줄넘김을 처리한다. */
    nowrap: 줄바꿈을 하지 않고, 넘치면 부모영역을 삐져나간다.
    wrap: 줄바꿈을 진행하고 float나 inline-block과 비슷하게 동작한다.
    wrap-reverse: 줄바꿈을 진행하되 반대로 넘어간다.

--flex-flow-- /* flex-direction과 flex-wrap을 한꺼번에 지정할 수 있는 단축 속성이다. */
    flex-flow: row wrap; == "flex-direction: row" + "flex-wrap: wrap";
    L> 두 개의 속성을 동시에 사용한 것과 동일하다.


--수평, 수직--
  --justify-content-- /* 가로 방향으로  */
    flex-start: 아이템들의 시작점을 기준으로 정렬한다.
    flex-end: 아이템들을 끝을 기점으로 정렬한다.
    center: 아이템들을 가운데로 정렬한다.
    space-between: 아이템들 사이에 균일한 간격을 생성한다.
    space-around: 아이템들의 둘레에 동일한 간격을 생성한다.
    space-evenly: 아이템들 사이와 양끝에 균일한 간격을 생성한다.

  --align-items-- /* 세로 방향으로 */
    stretch: 아이템들이 수직축 방향으로 늘어난다(기본값)
    L> 부모인 container의 높이의 값만큼 자동적으로 늘어난다.
    flex-start: 아이템들을 시작점을 기준으로 정렬한다.
    L> 만약 flex-direction의 값이 row이면 위에서 아래로 쌓이고, 
       만약 flex-direction의 값이 column이면 왼쪽에서부터 쌓인다.
    flex-end: 아이템들을 끝점을 기준으로 정렬한다.
    L> 만약 flex-direction의 값이 row이면 아래에서 위로 쌓이고,
       만약 flex-direction의 값이 column이면 아래에서부터 쌓인다.
    center: 아이템들을 가운데로 정렬한다.
    baseline: 아이템들을 텍스트 베이스라인 기준으로 정렬한다.
    L> 텍스트의 가장 하단점을 기준으로 정렬한다.

--align-content-- /* 여러 행을 정렬할 때 사용한다. */
  L> align-content의 값은 flex-wrap: wrap인 상태에서 아이템의 행이 2줄 이상일 때 동작한다

    strech: 아이템들이 수직축 방향으로 늘어난다(기본값)
    flex-start: 아이템들의 시작점을 기준으로 정렬한다.
    flex-end: 아이템들을 끝을 기점으로 정렬한다.
    center: 아이템들을 가운데로 정렬한다.
    space-between: 아이템들 사이에 균일한 간격을 생성한다.
    space-around: 아이템들의 둘레에 동일한 간격을 생성한다.
    space-evenly: 아이템들 사이와 양끝에 균일한 간격을 생성한다.
    L> MS 브라우저(IE, Edge)에서는 지원되지 않는다.




----items속성으로 넣는 경우----
  --flex-basis-- /* flex아이템의 기본적인 크기의 값을 설정한다 row: 너비, column: 높이 */
      0:
      50%:
      300px:
      10rem:
      content:

      L> 여기서 width의 값을 개별적으로 설정하지 않았다면 기본적인 width의 값은 content의 크리고 설정된다. 
      L> 만약 A, B, C 이렇게 3개의 요소가 존재하고 B의 값만 width의 값이 200px의 값을 넘는다면
         flex-basis의 값을 100px로 설정하면 b는 content의 크기 그대로 유지되고 나머지 A,C의 값은 100px의 값으로 설정된다.
         L> 하지만 여기서 width의 값을 강제로 100px로 지정하면 B의 값도 강제로 100px로 변경된다.

         .items{
            flex-basis: 100px;
            width: 100px;
         }
         L> 이렇게 동시에 사용할 수도 있다.

  --flex-grow--
      flex-basis의 값보다 커질 수 있는지 결정한다.
      flex-grow의 값은 숫자의 값이 들어가면서 유연하게 flex박스의 크기가 결정된다.
      .items{
          flex-grow: 1;
          L> 이렇게 1의 값을 넣어주면 container크기에 자동적으로 공간을 분해하여 나열된다.

          /* flex-grow: 0; (기본값) */ 
      }

      flex-grow의 숫자는 아이템에 flex-basis를 제외한 여백의 부분을 기준으로 비율을 지정한다.
      L> 여백의 값을 기준으로 비율을 지정하므로 안에 내용이 많다면 알아차리기 어려울 수 있다.

  --flex-shrink--
      flex-basis의 값보다 커질 수 있는지 결정한다.
      0보다 큰 값이 들어가면 해당 아이템이 flexible박스로 변경되고, flex-basis보다 작아진다.

      기본값이 1이기 때문에 따로 세팅하지 않아도 아이템이 flex-basis보다 작아질 수 있던 것이다.

      .item{
        flex-basis: 150px;
        flex-shrink: 1;
      }

      .container{
        display: flex;
      }
      .item:nth-child(1){
        flex-shrink: 0;
        width: 100px;
        L> 첫 번째 item은 100px의 값을 가진다.
      }
      .item:nth-child(2){
        flex-grow: 1;
        L> 두 번째 item은 전체 - 100px의 값을 가진다.
      }